// fileName: Sounds.js
import React, { useState, useEffect, useRef } from 'react';
import './Sounds.css';
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Icon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î (X) ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Volume2, VolumeX)
import { X, Volume2, VolumeX } from 'lucide-react'; 

// üõë Import ‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏≤‡∏ò: ../../assets/sound/)
import CafeSound from '../../assets/sound/Cafe.mp3';
import ForestSound from '../../assets/sound/EnchantedForest.mp3'; 
import FireSound from '../../assets/sound/Fireplace.mp3';
import OceanSound from '../../assets/sound/Ocean.mp3';
import RainSound from '../../assets/sound/Rain.mp3';
import RiverSound from '../../assets/sound/River.mp3'; 

// ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ö‡∏£‡∏£‡∏¢‡∏≤‡∏Å‡∏≤‡∏®
const soundOptions = [
    { name: 'Rain', url: RainSound, icon: 'üåßÔ∏è' },
    { name: 'Ocean', url: OceanSound, icon: 'üåä' },
    { name: 'Forest', url: ForestSound, icon: 'üå≤' },
    { name: 'Fire', url: FireSound, icon: 'üî•' },
    { name: 'River', url: RiverSound, icon: 'üö£üèª‚Äç‚ôÄÔ∏è' }, 
    { name: 'Caf√©', url: CafeSound, icon: '‚òï' },
];

const AmbientSoundSelector = ({ isOpen, onToggle }) => {
    const [currentSoundUrl, setCurrentSoundUrl] = useState(null); 
    // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á (0.0 ‡∏ñ‡∏∂‡∏á 1.0) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà 50%
    const [volume, setVolume] = useState(0.5); 
    // useRef ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ñ‡∏∂‡∏á Audio Element
    const audioRef = useRef(new Audio()); 
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å/‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
    const handleSelect = (soundOption) => {
        const newUrl = soundOption.url;
        const audio = audioRef.current;

        if (currentSoundUrl === newUrl) {
            // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏î‡∏ã‡πâ‡∏≥: ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            audio.pause();
            audio.currentTime = 0; 
            setCurrentSoundUrl(null);
        } else {
            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà:
            audio.src = newUrl;
            audio.loop = true; 
            audio.volume = volume; // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏á
            audio.play().catch(error => {
                console.error("Audio playback error (Autoplay prevented):", error);
            }); 
            setCurrentSoundUrl(newUrl);
        }
    };
    
    // Effect 1: Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Component ‡∏ñ‡∏π‡∏Å Unmount (‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á)
    useEffect(() => {
        const audio = audioRef.current;
        return () => {
            audio.pause();
            audio.currentTime = 0;
        };
    }, []); 

    // Effect 2: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ç‡∏≠‡∏á Audio Element ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Volume State ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
    useEffect(() => {
        audioRef.current.volume = volume;
    }, [volume]);
    
    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á Slider
    const handleVolumeChange = (e) => {
        // e.target.value ‡πÄ‡∏õ‡πá‡∏ô 0-100, ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0.0-1.0
        const newVolume = parseFloat(e.target.value) / 100;
        setVolume(newVolume);
    };


    return (
        <React.Fragment>
            {/* 1. ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏•‡∏±‡∏Å: ‡πÉ‡∏ä‡πâ onToggle ‡πÅ‡∏ó‡∏ô toggleModal */}
            <button 
                className="footer-icon-button" 
                onClick={onToggle} // üõë ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å onToggle ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Home.js
                aria-label="Select Ambient Sound"
                title="Change Ambient Sound"
            >
                <Volume2 size={24} color={currentSoundUrl ? 'lime' : '#FFF'} /> 
            </button>

            {/* 2. Modal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Ambient Sound Selector */}
            {isOpen && ( // üõë ‡πÉ‡∏ä‡πâ Props isOpen ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
                <div className="sound-selector-modal-wrapper"> 
                    <div className="sound-selector-modal">
                        
                        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏õ‡∏¥‡∏î Modal: ‡πÉ‡∏ä‡πâ onToggle ‡πÅ‡∏ó‡∏ô toggleModal */}
                        <button className="close-button" onClick={onToggle} aria-label="Close">
                            <X size={20} color="#333" />
                        </button>
                        
                        <h4 className="modal-title">Ambient Sounds</h4> 
                        
                        <div className="sound-grid">
                            {soundOptions.map((sound) => ( 
                                <div 
                                    key={sound.name}
                                    className={`sound-option ${currentSoundUrl === sound.url ? 'active' : ''}`} 
                                    onClick={() => handleSelect(sound)}
                                    title={`Play ${sound.name}`}
                                >
                                    <span className="sound-icon" role="img" aria-label={sound.name}>
                                        {sound.icon}
                                    </span>
                                    <span className="sound-name">{sound.name}</span>
                                </div>
                            ))}
                        </div>
                        
                        {/* üõë Volume Control ‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î */}
                        <div className="volume-control">
                            <VolumeX size={20} color="#333" />
                            
                            <input 
                                type="range" 
                                min="0" 
                                max="100" 
                                value={volume * 100} 
                                className="volume-slider" 
                                onChange={handleVolumeChange} 
                                aria-label="Volume"
                            />
                            
                            <Volume2 size={20} color="#333" />
                        </div>
                    </div>
                </div>
            )}
        </React.Fragment>
    );
};

export default AmbientSoundSelector;