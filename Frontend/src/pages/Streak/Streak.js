import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import './Streak.css'; 
import backgroundImage from '../../assets/bg.png'; 
import SettingsButton from '../../components/Button/Setting'; 
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Icon ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô (‡∏•‡∏ö PaintBucket ‡∏≠‡∏≠‡∏Å)
import { BookText, Home, Flame } from 'lucide-react'; 
// ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ BackgroundButton Component ‡πÉ‡∏´‡∏°‡πà
import BackgroundButton from '../../components/Button/SelectBg'; 
import AmbientSoundSelector from '../../components/Button/Sounds';

import { Line } from 'react-chartjs-2'; 

// 2. ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà Chart.js ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

// 3. ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô Component ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å)
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

const StreakPage = () => {
    const navigate = useNavigate();
    const [userName, setUserName] = useState('');
    const [currentTime, setCurrentTime] = useState(''); 

    // 1. State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Background
    const defaultBgUrl = backgroundImage; 
    const [currentBackground, setCurrentBackground] = useState(() => {
        return sessionStorage.getItem('selectedBackground') || defaultBgUrl;
    }); 

    // üõë State ‡πÉ‡∏´‡∏°‡πà: ‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Modal ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô 'background', 'sound', ‡∏´‡∏£‡∏∑‡∏≠ null)
    const [openModal, setOpenModal] = useState(null);
    
    // 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô Callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    const handleBackgroundSelect = (bgUrl) => {
        setCurrentBackground(bgUrl);
        sessionStorage.setItem('selectedBackground', bgUrl); 
    };


    // üõë ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î Modal
    const handleOpenModal = (modalName) => {
        // ‡∏ñ‡πâ‡∏≤ Modal ‡∏ó‡∏µ‡πà‡∏Å‡∏î‡∏ã‡πâ‡∏≥‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏õ‡∏¥‡∏î‡∏°‡∏±‡∏ô
        if (openModal === modalName) {
            setOpenModal(null);
        } else {
            // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡πÉ‡∏´‡∏°‡πà
            setOpenModal(modalName);
        }
    };

    // --- STATE & EFFECT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ---
    const [chartData, setChartData] = useState([]);
    const [totalTimeSpent, setTotalTimeSpent] = useState(0);
    const [streak, setStreak] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState(null);

    useEffect(() => {
        const fetchStatistics = async () => {
            let token = null;
            if (typeof sessionStorage !== 'undefined') {
                 token = sessionStorage.getItem('token');
            }

            if (!token) {
                // üõë ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (Mock Data) ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ Token
                // ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏´‡πá‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡∏ï‡∏≠‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Backend
                console.warn("No token found. Using mock data for stats.");
                
                // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
                const mockData = {
                   totalTimeAllTimeMinutes: 1200, // 20 hours
                   currentStreak: 6,
                   last7Days: [ 
                     { day: 'Sun', totalMinutes: 180 }, // 3h
                     { day: 'Mon', totalMinutes: 240 }, // 4h
                     { day: 'Tue', totalMinutes: 120 }, // 2h
                     { day: 'Wed', totalMinutes: 60 },  // 1h
                     { day: 'Thu', totalMinutes: 120 }, // 2h
                     { day: 'Fri', totalMinutes: 0 },   // 0h
                     { day: 'Sat', totalMinutes: 300 }  // 5h
                   ]
                };
                
                // Process mock data
                const formattedChartData = mockData.last7Days.map(item => ({
                    day: item.day,
                    h: parseFloat((item.totalMinutes / 60).toFixed(1)) 
                }));
                setChartData(formattedChartData);
                setTotalTimeSpent(Math.floor(mockData.totalTimeAllTimeMinutes / 60));
                setStreak(mockData.currentStreak);
                setIsLoading(false);
                return; // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
            }

            // --- ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ Token ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ---
            try {
                const response = await fetch('/api/v1/statistics', { 
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch statistics');
                }
                
                const data = await response.json();

                const formattedChartData = data.last7Days.map(item => ({
                    day: item.day,
                    h: parseFloat((item.totalMinutes / 60).toFixed(1)) 
                }));
                setChartData(formattedChartData);
                setTotalTimeSpent(Math.floor(data.totalTimeAllTimeMinutes / 60));
                setStreak(data.currentStreak);

            } catch (err) {
                setError(err.message);
                console.error("Error fetching stats:", err);
            } finally {
                setIsLoading(false);
            }
        };

        fetchStatistics();
    }, []); // [] ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
    // -------------------------------------------

    // ‚úÖ 1. ‡πÅ‡∏õ‡∏•‡∏á Data ‡πÉ‡∏´‡πâ Chart.js ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
    // (‡πÉ‡∏ä‡πâ React.useMemo ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏°‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà re-render)
    const chartJsData = React.useMemo(() => {
        // chartData ‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏Ñ‡∏∑‡∏≠: [{day: 'Sun', h: 3}, {day: 'Mon', h: 4}, ...]
        
        // Chart.js ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:
        const labels = chartData.map(item => item.day);  // ['Sun', 'Mon', ...]
        const data = chartData.map(item => item.h);      // [3, 4, ...]

        return {
            labels: labels,
            datasets: [{
                label: 'Time spent', // ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô tooltip
                data: data,
                borderColor: '#8A2BE2', // ‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á (‡∏™‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
                backgroundColor: 'rgba(138, 43, 226, 0.2)', // ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢)
                fill: true,
                tension: 0.3 // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏™‡πâ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏á‡∏°‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô 'monotone')
            }]
        };
    }, [chartData]); // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ chartData ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô

    // ‚úÖ 2. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Option ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü
    const chartJsOptions = {
        responsive: true, // ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≤‡∏ü‡∏¢‡πà‡∏≠‡∏Ç‡∏¢‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î
        maintainAspectRatio: false, // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ
        plugins: {
            legend: {
                display: false // ‡∏ã‡πà‡∏≠‡∏ô‡∏õ‡∏∏‡πà‡∏° Legend ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô (‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ)
            },
            tooltip: {
                // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á tooltip ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
                callbacks: {
                    label: function(context) {
                        return `Time spent: ${context.parsed.y} hours`;
                    }
                }
            }
        },
        scales: {
            y: {
                // ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏Å‡∏ô Y ‡πÉ‡∏´‡πâ‡∏°‡∏µ 'h' ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
                ticks: {
                    callback: function(value) {
                        return `${value} h`;
                    }
                }
            }
        }
    };

    const handleNavClick = (path) => {
        console.log(`Navigating to ${path}`);
    };

    return (
        <div 
            className="streak-page-container"
            style={{ backgroundImage: `url(${currentBackground})` }}
        >
            
            {/* Header / Quote */}
            <header className="streak-header">
                <div className="app-branding">
                    <span className="app-name">GetItDone</span>
                    <p className="app-subtitle">by Muk and Cream</p>
                </div>
                <div className="app-quote">
                    <p>"Strive for progress,</p>
                    <p>not perfection"</p>
                </div>
            </header>

            {/* Main Content Area */}
            <main className="streak-main-content">
                 {isLoading ? (
                    <div className="stats-loading">Loading Statistics...</div>
                ) : error ? (
                    <div className="stats-error">Error: {error}</div>
                ) : (
                    // (A) ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏ö‡∏•‡∏≠)
                    <div className="stats-content-box">
                        <h1 className="stats-title">Statistics</h1>
                        
                        {/* (B) ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü */}
                        <div className="stats-chart-wrapper" style={{ height: '300px' }}>
                            {/* Chart.js ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ ResponsiveContainer
                                ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÉ‡∏´‡πâ div ‡πÅ‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô‡πÅ‡∏ó‡∏ô (300px)
                            */}
                            <Line options={chartJsOptions} data={chartJsData} />
                        </div>

                        {/* (C) ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */}
                        <div className="stats-summary-wrapper">
                            
                            <div className="stats-card total-time-card">
                                <span className="stats-card-label">Total time spent:</span>
                                <span className="stats-card-value">{totalTimeSpent} hours</span>
                            </div>
                            
                            <div className="stats-card streak-card">
                                <Flame size={48} color="#FF6B00" />
                                <span className="stats-card-value">{streak}</span>
                            </div>

                        </div>
                    </div> // (‡∏õ‡∏¥‡∏î stats-content-box)
                )} 
                
            </main>

            
            {/* Footer / Navigation Icons */}
            <footer className="streak-footer">
                
                {/* Left Side Icons */}
                <div className="footer-icons">
                    {/* üõë ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏õ‡∏∏‡πà‡∏° Music ‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏õ‡πá‡∏ô AmbientSoundSelector */}
                    <AmbientSoundSelector
                        isOpen={openModal === 'sound'} // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ Modal ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        onToggle={() => handleOpenModal('sound')} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                    />
                    
                    {/* BackgroundButton */}
                    <BackgroundButton 
                        isOpen={openModal === 'background'} // ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ß‡πà‡∏≤ Modal ‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        onToggle={() => handleOpenModal('background')} // ‡∏™‡πà‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
                        onSelectBackground={handleBackgroundSelect}
                    />
                    
                </div>

                {/* Right Side Icons (Navigation) */}
                <div className="footer-icons">
                    <button className="footer-icon-button" title="Focus" onClick={() => navigate('/focus')}><BookText size={24} color="#FFF" /></button>
                    <button className="footer-icon-button" title="Home" onClick={() => navigate('/home')}><Home size={24} color="#FFF" /></button>
                    <button className="footer-icon-button" title="Streak" onClick={() => navigate('/streak')}><Flame size={24} color="#FFF" /></button>
                    <SettingsButton /> 
                </div>
            </footer>
            
        </div>
    );
};

export default StreakPage;