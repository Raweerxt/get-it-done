// routes/focusApi.js
// (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢ PRISMA + API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)

const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');

// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô!! ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Prisma Client ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
const { prisma } = require('../prisma/client'); // (‡πÅ‡∏Å‡πâ path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å)

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token (‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
const authMiddleware = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authorization token required' });
    }
    const token = authHeader.split(' ')[1];
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded; // { id: ..., username: ... }
        next();
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }
};

// 1. ‡πÅ‡∏õ‡∏•‡∏á durationMinutes (float) ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö HH:MM:SS
const formatDuration = (duration) => {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å Minutes (float) ‡πÄ‡∏õ‡πá‡∏ô Seconds (integer)
    const totalSeconds = Math.round(duration * 60); 

    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;

    // PadStart ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ 2 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏™‡∏°‡∏≠ (01:05:07)
    const pad = (num) => String(num).padStart(2, '0');

    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 01:30:30
    return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;
};

// 2. ‡πÅ‡∏õ‡∏•‡∏á UTC timestamp ‡πÄ‡∏õ‡πá‡∏ô Thai Time (GMT+7) ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
const formatThaiTime = (utcDate) => {
    const date = new Date(utcDate);
    
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
    const options = {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false, // ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
        timeZone: 'Asia/Bangkok' // ‡πÑ‡∏ó‡∏°‡πå‡πÇ‡∏ã‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢ (GMT+7)
    };

    // ‡πÉ‡∏ä‡πâ 'en-GB' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY
    const thaiTimeStr = date.toLocaleString('en-GB', options); 
    
    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô YYYY/MM/DD, HH:MM:SS
    // 'en-GB' ‡∏à‡∏∞‡πÑ‡∏î‡πâ "DD/MM/YYYY, HH:MM:SS"
    const parts = thaiTimeStr.split(', ');
    const [day, month, year] = parts[0].split('/');
    
    return `${year}/${month}/${day}, ${parts[1]}`;
};

// =============================================
// 1. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Focus.js)
// (POST /api/v1/focus-sessions)
// =============================================
router.post('/focus-sessions', authMiddleware, async (req, res) => {
    const { taskName, durationMinutes } = req.body;
    const { id: userId } = req.user;

    if (!durationMinutes || durationMinutes <= 0) {
        return res.status(400).json({ message: 'Duration must be greater than 0' });
    }

    try {
        // ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î Prisma (‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
        const newSession = await prisma.focusSession.create({
            data: {
                taskName: taskName || 'Focus Session', // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ default
                durationMinutes: durationMinutes,
                userId: userId, // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User ‡∏ó‡∏µ‡πà login
            }
        });

        res.status(201).json({ message: 'Focus session saved!', data: newSession });

    } catch (error) {
        console.error("Error saving focus session:", error);
        res.status(500).json({ message: 'Failed to save focus session' });
    }
});

// =============================================
// üÜï API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" Session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
// (GET /api/v1/focus-sessions/list)
// =============================================
router.get('/focus-sessions/list', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const sessions = await prisma.focusSession.findMany({
            where: { userId: userId },
            orderBy: { createdAt: 'desc' } // ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î
        });

        // ‚úÖ ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const formattedSessions = sessions.map(session => ({
            ...session,
            // 1. ‡πÅ‡∏õ‡∏•‡∏á durationMinutes ‡πÄ‡∏õ‡πá‡∏ô HH:MM:SS
            durationFormatted: formatDuration(session.durationMinutes), 
            
            // 2. ‡πÅ‡∏õ‡∏•‡∏á createdAt ‡πÄ‡∏õ‡πá‡∏ô Thai Time (GMT+7)
            createdAtThai: formatThaiTime(session.createdAt), 
        }));

        res.status(200).json(formattedSessions);

    } catch (error) {
        console.error("Error fetching sessions:", error);
        res.status(500).json({ message: 'Failed to fetch focus sessions' });
    }
});

// =============================================
// 2. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "Total time spent" (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)
// (GET /api/v1/stats/total)
// =============================================
router.get('/stats/total', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ Prisma aggregate ‡πÄ‡∏û‡∏∑‡πà‡∏≠ SUM
        const result = await prisma.focusSession.aggregate({
            _sum: {
                durationMinutes: true
            },
            where: {
                userId: userId
            }
        });
        
        const totalMinutes = result._sum.durationMinutes || 0;
        const totalHours = Math.floor(totalMinutes / 60);

        res.status(200).json({
            totalMinutes: totalMinutes,
            totalHours: totalHours
        });
    } catch (error) {
        res.status(500).json({ message: 'Failed to fetch total stats' });
    }
});


// =============================================
// 3. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "‡∏Å‡∏£‡∏≤‡∏ü 7 ‡∏ß‡∏±‡∏ô"
// (GET /api/v1/stats/weekly)
// =============================================
router.get('/stats/weekly', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;
    
    // üõë [‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ 1] ‡πÉ‡∏ä‡πâ Date.now() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô/‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô UTC
    const now = new Date();
    
    // üõë [‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ 2] ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô UTC
    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ô UTC
    const todayUTCStart = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0)); 

    // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô UTC (‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô 7 ‡∏ß‡∏±‡∏ô)
    const sevenDaysAgoUTCStart = new Date(todayUTCStart);
    sevenDaysAgoUTCStart.setUTCDate(todayUTCStart.getUTCDate() - 6); 

    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏î‡πâ‡∏ß‡∏¢ Prisma)
        const sessions = await prisma.focusSession.findMany({
            where: {
                userId: userId,
                createdAt: {
                    gte: sevenDaysAgoUTCStart, // ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ö‡∏ö UTC
                }
            },
            select: {
                durationMinutes: true,
                createdAt: true
            }
        });

        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Array 7 ‡∏ß‡∏±‡∏ô (Sun, Mon, ...)
        const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        let weeklyDataMap = new Map();
        
        // 3. (Process ‡πÉ‡∏ô JS) ‡∏ß‡∏ô‡∏•‡∏π‡∏õ 7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
        for (let i = 0; i < 7; i++) {
            const d = new Date(sevenDaysAgoUTCStart);
            d.setUTCDate(sevenDaysAgoUTCStart.getUTCDate() + i);
            
            // üõë [‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ 3] ‡πÉ‡∏ä‡πâ getUTCFullYear/Month/Date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á UTC
            const dayKey = `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}-${String(d.getUTCDate()).padStart(2, '0')}`;
            const dayName = dayLabels[d.getUTCDay()]; 
            
            weeklyDataMap.set(dayKey, { day: dayName, hours: 0 });
        }

        // 4. (Process ‡πÉ‡∏ô JS) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB
        sessions.forEach(session => {
            // üõë [‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ 4] ‡πÉ‡∏ä‡πâ getUTCFullYear/Month/Date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DB (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC)
            const d = session.createdAt;
            const sessionDateKey = `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}-${String(d.getUTCDate()).padStart(2, '0')}`;
            
            if (weeklyDataMap.has(sessionDateKey)) {
                const dayData = weeklyDataMap.get(sessionDateKey);
                dayData.hours += (session.durationMinutes / 60);
                weeklyDataMap.set(sessionDateKey, dayData);
            }
        });
        
        // 5. ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÄ‡∏õ‡πá‡∏ô Array
        const weeklyData = Array.from(weeklyDataMap.values()).map(data => ({
            ...data,
            hours: parseFloat(data.hours.toFixed(1))
        }));

        res.status(200).json(weeklyData);

    } catch (error) {
        console.error("Weekly stats error:", error);
        res.status(500).json({ message: 'Failed to fetch weekly stats' });
    }
});


// =============================================
// 4. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "Streak" (‡∏£‡∏π‡∏õ‡πÑ‡∏ü üî•)
// (GET /api/v1/stats/streak)
// =============================================
router.get('/stats/streak', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // 1. ‡∏î‡∏∂‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏Å‡∏±‡∏™ "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        const allSessions = await prisma.focusSession.findMany({
            where: { userId: userId },
            select: { createdAt: true },
            orderBy: { createdAt: 'desc' }
        });

        if (allSessions.length === 0) {
            return res.status(200).json({ streak: 0 });
        }

        // 2. (Process ‡πÉ‡∏ô JS) ‡∏™‡∏£‡πâ‡∏≤‡∏á Set ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        const dateSet = new Set(
            allSessions.map(s => s.createdAt.toISOString().split('T')[0])
        );

        // 3. (Process ‡πÉ‡∏ô JS) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö Streak
        let currentStreak = 0;
        let today = new Date();
        const todayKey = today.toISOString().split('T')[0];
        
        let yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        const yesterdayKey = yesterday.toISOString().split('T')[0];
        
        let dayToTest;

        // 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‡∏ó‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (dateSet.has(todayKey)) {
            currentStreak = 1;
            dayToTest = new Date(today); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        } 
        // 3.2 ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô" ‡∏ó‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        else if (dateSet.has(yesterdayKey)) {
            currentStreak = 1;
            dayToTest = new Date(yesterday); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
        } 
        // 3.3 ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏•‡∏¢ = streak = 0
        else {
            return res.status(200).json({ streak: 0 });
        }
        
        // 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        // (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å i = 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ô‡∏±‡∏ö dayToTest (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô) ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß)
        for (let i = 1; i < dateSet.size; i++) {
            let previousDay = new Date(dayToTest);
            previousDay.setDate(dayToTest.getDate() - i);
            
            const previousDayKey = previousDay.toISOString().split('T')[0];

            if (dateSet.has(previousDayKey)) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
                currentStreak++;
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö
                break;
            }
        }
        
        res.status(200).json({ streak: currentStreak });

    } catch (error) {
        console.error("Streak error:", error);
        res.status(500).json({ message: 'Failed to fetch streak' });
    }
});

router.get('/statistics', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // --- 1. Logic ‡∏î‡∏∂‡∏á Total Time (‡∏à‡∏≤‡∏Å /stats/total) ---
        const totalResult = await prisma.focusSession.aggregate({
            _sum: { durationMinutes: true },
            where: { userId: userId }
        });
        const totalTimeAllTimeMinutes = totalResult._sum.durationMinutes || 0;

        // --- 2. Logic ‡∏î‡∏∂‡∏á Weekly (‡∏à‡∏≤‡∏Å /stats/weekly) [‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢] ---
        const now = new Date();
        const todayUTCStart = new Date(Date.UTC(now.getUTCFullYear(), now.getUTCMonth(), now.getUTCDate(), 0, 0, 0)); 
        const sevenDaysAgoUTCStart = new Date(todayUTCStart);
        sevenDaysAgoUTCStart.setUTCDate(todayUTCStart.getUTCDate() - 6);

        const sessions = await prisma.focusSession.findMany({
            where: {
                userId: userId,
                createdAt: { gte: sevenDaysAgoUTCStart } // üëà ‡πÉ‡∏ä‡πâ UTC Start
            },
            select: { durationMinutes: true, createdAt: true }
        });

        const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        let weeklyDataMap = new Map();

        for (let i = 0; i < 7; i++) {
            const d = new Date(sevenDaysAgoUTCStart);
            d.setUTCDate(sevenDaysAgoUTCStart.getUTCDate() + i);
            
            // üí° ‡πÉ‡∏ä‡πâ getUTCFullYear/Month/Date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡∏ó‡∏µ‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á UTC
            const dayKey = `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}-${String(d.getUTCDate()).padStart(2, '0')}`;
            const dayName = dayLabels[d.getUTCDay()]; 
            
            weeklyDataMap.set(dayKey, { day: dayName, totalMinutes: 0 });
        }

        sessions.forEach(session => {
            // üí° ‡πÉ‡∏ä‡πâ getUTCFullYear/Month/Date ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Key ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DB (‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô UTC)
            const d = session.createdAt;
            const sessionDateKey = `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}-${String(d.getUTCDate()).padStart(2, '0')}`;
            
            if (weeklyDataMap.has(sessionDateKey)) {
                const dayData = weeklyDataMap.get(sessionDateKey);
                dayData.totalMinutes += session.durationMinutes; 
                weeklyDataMap.set(sessionDateKey, dayData);
            }
        });
        
        const last7Days = Array.from(weeklyDataMap.values());


        // --- 3. Logic ‡∏î‡∏∂‡∏á Streak (‡∏à‡∏≤‡∏Å /stats/streak) ---
        const allSessions = await prisma.focusSession.findMany({
            where: { userId: userId },
            select: { createdAt: true },
            orderBy: { createdAt: 'desc' }
        });

        let currentStreak = 0;
        if (allSessions.length > 0) {
            const dateSet = new Set(
                allSessions.map(s => s.createdAt.toISOString().split('T')[0])
            );

            let todayCheck = new Date();
            const todayKey = todayCheck.toISOString().split('T')[0];
            
            let yesterdayCheck = new Date(todayCheck);
            yesterdayCheck.setDate(todayCheck.getDate() - 1);
            const yesterdayKey = yesterdayCheck.toISOString().split('T')[0];
            
            let dayToTest;

            if (dateSet.has(todayKey)) {
                currentStreak = 1;
                dayToTest = new Date(todayCheck);
            } else if (dateSet.has(yesterdayKey)) {
                currentStreak = 1;
                dayToTest = new Date(yesterdayCheck);
            } else {
                currentStreak = 0;
            }
            
            if (currentStreak > 0) {
                 for (let i = 1; i < dateSet.size; i++) {
                    let previousDay = new Date(dayToTest);
                    previousDay.setDate(dayToTest.getDate() - i);
                    const previousDayKey = previousDay.toISOString().split('T')[0];

                    if (dateSet.has(previousDayKey)) {
                        currentStreak++;
                    } else {
                        break;
                    }
                }
            }
        }

        // --- 4. ‡∏£‡∏ß‡∏ö‡∏ï‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö ---
        res.status(200).json({
            totalTimeAllTimeMinutes: totalTimeAllTimeMinutes,
            currentStreak: currentStreak,
            last7Days: last7Days 
        });

    } catch (error) {
        console.error("Combined Statistics Error:", error);
        res.status(500).json({ message: 'Failed to fetch statistics' });
    }
});

module.exports = router;