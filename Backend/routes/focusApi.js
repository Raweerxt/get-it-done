// routes/focusApi.js
// (‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏î‡πâ‡∏ß‡∏¢ PRISMA + API ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥)

const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');

// ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô!! ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ Prisma Client ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
const { prisma } = require('../prisma/client'); // (‡πÅ‡∏Å‡πâ path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å)

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Token (‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏î‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
const authMiddleware = (req, res, next) => {
    const authHeader = req.headers.authorization;
    if (!authHeader || !authHeader.startsWith('Bearer ')) {
        return res.status(401).json({ message: 'Authorization token required' });
    }
    const token = authHeader.split(' ')[1];
    try {
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        req.user = decoded; // { id: ..., username: ... }
        next();
    } catch (error) {
        return res.status(401).json({ message: 'Invalid or expired token' });
    }
};

// =============================================
// 1. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å" ‡πÄ‡∏ß‡∏•‡∏≤ (‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Focus.js)
// (POST /api/v1/focus-sessions)
// =============================================
router.post('/focus-sessions', authMiddleware, async (req, res) => {
    const { taskName, durationMinutes } = req.body;
    const { id: userId } = req.user;

    if (!durationMinutes || durationMinutes <= 0) {
        return res.status(400).json({ message: 'Duration must be greater than 0' });
    }

    try {
        // ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î Prisma (‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
        const newSession = await prisma.focusSession.create({
            data: {
                taskName: taskName || 'Focus Session', // ‡πÉ‡∏™‡πà‡∏Ñ‡πà‡∏≤ default
                durationMinutes: durationMinutes,
                userId: userId, // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö User ‡∏ó‡∏µ‡πà login
            }
        });

        res.status(201).json({ message: 'Focus session saved!', data: newSession });

    } catch (error) {
        console.error("Error saving focus session:", error);
        res.status(500).json({ message: 'Failed to save focus session' });
    }
});


// =============================================
// 2. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "Total time spent" (‡∏ã‡πâ‡∏≤‡∏¢‡∏•‡πà‡∏≤‡∏á)
// (GET /api/v1/stats/total)
// =============================================
router.get('/stats/total', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // ‚úÖ ‡πÉ‡∏ä‡πâ Prisma aggregate ‡πÄ‡∏û‡∏∑‡πà‡∏≠ SUM
        const result = await prisma.focusSession.aggregate({
            _sum: {
                durationMinutes: true
            },
            where: {
                userId: userId
            }
        });
        
        const totalMinutes = result._sum.durationMinutes || 0;
        const totalHours = Math.floor(totalMinutes / 60);

        res.status(200).json({
            totalMinutes: totalMinutes,
            totalHours: totalHours
        });
    } catch (error) {
        res.status(500).json({ message: 'Failed to fetch total stats' });
    }
});


// =============================================
// 3. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "‡∏Å‡∏£‡∏≤‡∏ü 7 ‡∏ß‡∏±‡∏ô"
// (GET /api/v1/stats/weekly)
// =============================================
router.get('/stats/weekly', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const sevenDaysAgo = new Date(today);
    sevenDaysAgo.setDate(today.getDate() - 6); // 6 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß + ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = 7 ‡∏ß‡∏±‡∏ô

    try {
        // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö 7 ‡∏ß‡∏±‡∏ô‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏î‡πâ‡∏ß‡∏¢ Prisma)
        const sessions = await prisma.focusSession.findMany({
            where: {
                userId: userId,
                createdAt: {
                    gte: sevenDaysAgo, // gte = Greater than or equal
                }
            },
            select: {
                durationMinutes: true,
                createdAt: true
            }
        });

        // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á Array 7 ‡∏ß‡∏±‡∏ô (Sun, Mon, ...)
        const dayLabels = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        let weeklyDataMap = new Map();
        
        // 3. (Process ‡πÉ‡∏ô JS) ‡∏ß‡∏ô‡∏•‡∏π‡∏õ 7 ‡∏ß‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡∏ï‡πâ‡∏ô
        for (let i = 0; i < 7; i++) {
            const d = new Date(sevenDaysAgo);
            d.setDate(sevenDaysAgo.getDate() + i);
            
            const dayKey = d.toISOString().split('T')[0]; // format YYYY-MM-DD
            const dayName = dayLabels[d.getUTCDay()]; // 'Sun', 'Mon', ...
            
            weeklyDataMap.set(dayKey, { day: dayName, hours: 0 });
        }

        // 4. (Process ‡πÉ‡∏ô JS) ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å DB
        sessions.forEach(session => {
            const sessionDateKey = session.createdAt.toISOString().split('T')[0];
            if (weeklyDataMap.has(sessionDateKey)) {
                const dayData = weeklyDataMap.get(sessionDateKey);
                dayData.hours += (session.durationMinutes / 60);
                weeklyDataMap.set(sessionDateKey, dayData);
            }
        });
        
        // 5. ‡πÅ‡∏õ‡∏•‡∏á Map ‡πÄ‡∏õ‡πá‡∏ô Array
        const weeklyData = Array.from(weeklyDataMap.values()).map(data => ({
            ...data,
            hours: parseFloat(data.hours.toFixed(1))
        }));

        res.status(200).json(weeklyData);

    } catch (error) {
        console.error("Weekly stats error:", error);
        res.status(500).json({ message: 'Failed to fetch weekly stats' });
    }
});


// =============================================
// 4. API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥: "Streak" (‡∏£‡∏π‡∏õ‡πÑ‡∏ü üî•)
// (GET /api/v1/stats/streak)
// =============================================
router.get('/stats/streak', authMiddleware, async (req, res) => {
    const { id: userId } = req.user;

    try {
        // 1. ‡∏î‡∏∂‡∏á "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÇ‡∏ü‡∏Å‡∏±‡∏™ "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"
        const allSessions = await prisma.focusSession.findMany({
            where: { userId: userId },
            select: { createdAt: true },
            orderBy: { createdAt: 'desc' }
        });

        if (allSessions.length === 0) {
            return res.status(200).json({ streak: 0 });
        }

        // 2. (Process ‡πÉ‡∏ô JS) ‡∏™‡∏£‡πâ‡∏≤‡∏á Set ‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà (YYYY-MM-DD) ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
        const dateSet = new Set(
            allSessions.map(s => s.createdAt.toISOString().split('T')[0])
        );

        // 3. (Process ‡πÉ‡∏ô JS) ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö Streak
        let currentStreak = 0;
        let today = new Date();
        const todayKey = today.toISOString().split('T')[0];
        
        let yesterday = new Date(today);
        yesterday.setDate(today.getDate() - 1);
        const yesterdayKey = yesterday.toISOString().split('T')[0];
        
        let dayToTest;

        // 3.1 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" ‡∏ó‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        if (dateSet.has(todayKey)) {
            currentStreak = 1;
            dayToTest = new Date(today); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        } 
        // 3.2 ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ "‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô" ‡∏ó‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        else if (dateSet.has(yesterdayKey)) {
            currentStreak = 1;
            dayToTest = new Date(yesterday); // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô
        } 
        // 3.3 ‡∏ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÄ‡∏•‡∏¢ = streak = 0
        else {
            return res.status(200).json({ streak: 0 });
        }
        
        // 4. ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
        // (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å i = 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏ô‡∏±‡∏ö dayToTest (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ/‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏ô) ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏•‡πâ‡∏ß)
        for (let i = 1; i < dateSet.size; i++) {
            let previousDay = new Date(dayToTest);
            previousDay.setDate(dayToTest.getDate() - i);
            
            const previousDayKey = previousDay.toISOString().split('T')[0];

            if (dateSet.has(previousDayKey)) {
                // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô
                currentStreak++;
            } else {
                // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏Å‡∏±‡∏ô ‡∏´‡∏¢‡∏∏‡∏î‡∏ô‡∏±‡∏ö
                break;
            }
        }
        
        res.status(200).json({ streak: currentStreak });

    } catch (error) {
        console.error("Streak error:", error);
        res.status(500).json({ message: 'Failed to fetch streak' });
    }
});


module.exports = router;